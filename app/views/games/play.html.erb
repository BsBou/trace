<div class="mobile-game">
  <div class="mobile-game-header">
    <div class="mobile-header">
      <div class='left'>

        <h1><%= @game.name %></h1>
        <h2>Team: <%= @team.name %></h2>

        <h2>Score: <%= @team.score %></h2>
        <span><%= @game.start.strftime("%R %P") %> â€“ <%= @game.end.strftime("%R %P") %></span>

        <div class="weather">
          <span>Weather</span><br>
        </div>
      </div>

      <% lost = (Time.zone.now + 1*60*60) - @team.created_at %>
      <% full = @game.end - @team.created_at %>
      <% left = full - lost %>
      <p id="timer"> <%= left %> </p>
      <div class='right'>
        <div class="timer">
          <% if ((Time.zone.now + 1*60*60) > @game.end) %>
          <span id="clockdiv">
          <span class="minutes"></span> Times up!
          <span class="seconds"></span>
          <span>
          <% else %>
          <br>
          <span id="clockdiv">
          <span class="hours"></span>
          <span class="minutes"></span>
          <span class="seconds"></span>
          <span>
          <% end  %>
        </div>
        <%= link_to image_tag("leaderboard.png"), game_leaderboard_path(@game) %>
        <div class="help">

        </div>
      </div>
    </div>
  </div>

  <!-- marker for each challenge -->
    <% @markers = @game.challenges.geocoded.map do |challenge| %>
      <% {
          lat: challenge.latitude,
          lng: challenge.longitude,
          info_window: render(partial: "challenge_popup", locals: {challenge: challenge})
          # image_url: helpers.asset_url("app/assets/images/marker.png")

          } %>
    <% end %>

  <!-- map -->
  <div class="mobile-game-map">
    <div style="width: 100vw; height: 100vh;"
    data-controller="map-mobile"
    data-map-mobile-markers-value="<%= @markers.to_json %>"
    data-map-mobile-api-key-value="<%= ENV['MAPBOX_API_KEY'] %>">
    </div>
  </div>

  <div class="challenge-info">

  </div>

</div>

<script>
function getTimeRemaining(endtime) {
  var t = Date.parse(endtime) - Date.parse(new Date());
  var seconds = Math.floor((t / 1000) % 60);
  var minutes = Math.floor((t / 1000 / 60) % 60);
  var hours = Math.floor((t / (1000 * 60 * 60)) % 24);
  return {
    'total': t,
    'hours': hours,
    'minutes': minutes,
    'seconds': seconds
  };
}

function initializeClock(id, endtime) {
  var clock = document.getElementById(id);
  var hoursSpan = clock.querySelector('.hours');
  var minutesSpan = clock.querySelector('.minutes');
  var secondsSpan = clock.querySelector('.seconds');

  function updateClock() {
    var t = getTimeRemaining(endtime);

    hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
    minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
    secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

    if (t.total <= 0) {
      clearInterval(timeinterval);
    }
  }

  updateClock();
  var timeinterval = setInterval(updateClock, 1000);
}

var timeTo = parseInt(document.getElementById("timer").innerHTML)
var timeInSeconds = timeTo
var currentTime = Date.parse(new Date());
var deadline = new Date(currentTime + timeInSeconds*1000);
initializeClock('clockdiv', deadline);
</script>
